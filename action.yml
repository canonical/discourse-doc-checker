name: 'Documentation Checker'
description: 'Check documentation differences between Discourse and local files.'
author: 'Canonical'

inputs:
  docs-path:
    description: 'Path to documentation directory'
    required: false
    default: 'docs'
  discourse-url:
    description: 'Discourse instance URL'
    required: false
    default: 'https://discourse.charmhub.io'
  discourse-api-key:
    description: 'Discourse API key'
    required: false
    default: ''
  discourse-api-user:
    description: 'Discourse API username'
    required: false
    default: 'system'
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  github-token:
    description: 'GitHub token for creating issues'
    required: false
    default: ''
  create-issue:
    description: 'Whether to create an issue with the output (true/false)'
    required: false
    default: 'true'
  issue-title:
    description: 'Title for the issue to be created'
    required: false
    default: 'Documentation Check Failed'
  issue-labels:
    description: 'Comma-separated list of labels to add to the issue (labels must exist in the target repository)'
    required: false
    default: ''
  update-existing-issue:
    description: 'Whether to update existing open issue instead of creating a new one (true/false)'
    required: false
    default: 'true'

# outputs:
#   result:
#     description: 'Result of the documentation check (success/failure)'

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ github.action_path }}/requirements.txt

    - name: Check if docs directory exists
      id: docs-check
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [[ -d "${{ inputs.docs-path }}" ]]; then
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "exists=false" >> "$GITHUB_OUTPUT"
          echo "Warning: Documentation directory '${{ inputs.docs-path }}' not found"
        fi

    - name: Run documentation format check
      id: doc-check
      if: steps.docs-check.outputs.exists == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        DISCOURSE_URL: ${{ inputs.discourse-url }}
        DISCOURSE_API_KEY: ${{ inputs.discourse-api-key }}
        DISCOURSE_API_USER: ${{ inputs.discourse-api-user }}
        DOCS_PATH_GLOB: ${{ inputs.docs-path }}
        CHARM_DIR: ${{ inputs.working-directory }}
      run: |
        echo "Running documentation format check..."
        
        # Capture output to both stdout and a file
        output_file="${{ runner.temp }}/doc_check_output.txt"
        
        # Run the check and capture both stdout and stderr
        if python ${{ github.action_path }}/check_docs.py > "$output_file" 2>&1; then
          echo "check_result=success" >> "$GITHUB_OUTPUT"
          exit_code=0
        else
          echo "check_result=failure" >> "$GITHUB_OUTPUT"
          exit_code=$?
        fi
        
        # Display the output
        cat "$output_file"
        
        # Store the output for potential issue creation
        echo "output_file=$output_file" >> "$GITHUB_OUTPUT"
        
        # Exit with the original exit code
        exit $exit_code

    - name: Create issue with results
      if: inputs.create-issue == 'true' && inputs.github-token != '' && (failure() || steps.doc-check.outputs.check_result == 'failure' || steps.docs-check.outputs.exists == 'false')
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        # Check if an open issue with the same title already exists
        issue_title="${{ inputs.issue-title }}"
        existing_issue=$(gh issue list --repo "${{ github.repository }}" --state open --search "\"$issue_title\"" --json number,title --jq '.[] | select(.title == "'"$issue_title"'") | .number' | head -1)
        
        if [[ -n "$existing_issue" ]]; then
          echo "Open issue #$existing_issue with title '$issue_title' already exists."
          
          if [[ "${{ inputs.update-existing-issue }}" == "true" ]]; then
            echo "Updating existing issue #$existing_issue with new results..."
            update_existing_issue=true
            issue_number="$existing_issue"
          else
            echo "Skipping issue creation (set update-existing-issue to 'true' to update existing issues)."
            echo "Existing issue URL: ${{ github.server_url }}/${{ github.repository }}/issues/$existing_issue"
            exit 0
          fi
        else
          update_existing_issue=false
        fi
        
        # Read the output from the file
        output_file="${{ steps.doc-check.outputs.output_file }}"
        
        # Default output file if the previous step didn't run
        if [[ ! -f "$output_file" ]]; then
          output_file="${{ runner.temp }}/doc_check_output.txt"
          if [[ "${{ steps.docs-check.outputs.exists }}" == "false" ]]; then
            echo "Documentation directory '${{ inputs.docs-path }}' not found" > "$output_file"
          else
            echo "Documentation check was skipped or failed to generate output" > "$output_file"
          fi
        fi
        
        # Prepare issue body
        issue_body_file="${{ runner.temp }}/issue_body.md"
        
        # Determine the issue type
        issue_type="Unknown"
        if [[ "${{ steps.docs-check.outputs.exists }}" == "false" ]]; then
          issue_type="Missing Documentation Directory"
        elif [[ "${{ steps.doc-check.outputs.check_result }}" == "failure" ]]; then
          issue_type="Documentation Differences Found"
        else
          issue_type="Documentation Check Failed"
        fi
        
        # Create issue body
        cat > "$issue_body_file" << ISSUE_BODY
        # Documentation Check Issue: $issue_type
        
        **Repository:** ${{ github.repository }}
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        **Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        **Issue Type:** $issue_type
        **Status:** ${{ steps.doc-check.outputs.check_result || 'skipped' }}
        
        ## Details
        
        \`\`\`
        ISSUE_BODY
        
        # Append the actual output
        cat "$output_file" >> "$issue_body_file"
        
        # Close the code block and add footer
        cat >> "$issue_body_file" << 'ISSUE_FOOTER'
        ```
        
        ## Next Steps
        
        - Review the output above to understand what documentation issues were found
        - Check the workflow run link for more detailed logs
        - Fix the documentation issues and push changes to resolve this issue
        
        ---
        *This issue was automatically created by the Documentation Checker action when problems were detected.*
        ISSUE_FOOTER
        
        # Create or update the issue using GitHub CLI
        if [[ "$update_existing_issue" == "true" ]]; then
          # Update existing issue
          echo "## Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$issue_body_file"
          
          gh issue comment "$issue_number" \
            --body-file "$issue_body_file" \
            --repo "${{ github.repository }}"
          
          echo "Issue #$issue_number updated successfully"
          echo "Issue URL: ${{ github.server_url }}/${{ github.repository }}/issues/$issue_number"
        else
          # Create new issue
          if [[ -n "${{ inputs.issue-labels }}" ]]; then
            # Try to create the issue with labels first
            if ! gh issue create \
              --title "${{ inputs.issue-title }}" \
              --body-file "$issue_body_file" \
              --label "${{ inputs.issue-labels }}" \
              --repo "${{ github.repository }}" 2>/dev/null; then
              
              echo "Failed to create issue with labels (labels may not exist), creating without labels..."
              # If that fails (likely due to non-existent labels), create without labels
              issue_url=$(gh issue create \
                --title "${{ inputs.issue-title }}" \
                --body-file "$issue_body_file" \
                --repo "${{ github.repository }}")
            else
              issue_url=$(gh issue create \
                --title "${{ inputs.issue-title }}" \
                --body-file "$issue_body_file" \
                --label "${{ inputs.issue-labels }}" \
                --repo "${{ github.repository }}")
            fi
          else
            # No labels specified, create issue without labels
            issue_url=$(gh issue create \
              --title "${{ inputs.issue-title }}" \
              --body-file "$issue_body_file" \
              --repo "${{ github.repository }}")
          fi
          
          echo "Issue created successfully"
          echo "Issue URL: $issue_url"
        fi

branding:
  icon: 'file-text'
  color: 'blue'